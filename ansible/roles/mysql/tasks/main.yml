---
# MySQL installation and configuration

# Check current MySQL installation
- name: Check if MySQL is already installed
  command: mysql --version
  register: mysql_current_version
  failed_when: false
  changed_when: false

- name: Display current MySQL status
  debug:
    msg: "MySQL Status: {{ 'Already installed - ' + mysql_current_version.stdout if mysql_current_version.rc == 0 else 'Not installed, will install latest available' }}"
  tags: [mysql]

# Try to add MySQL APT repository for latest version (with fallback)
- name: Download MySQL APT repository package
  get_url:
    url: https://dev.mysql.com/get/mysql-apt-config_0.8.24-1_all.deb
    dest: /tmp/mysql-apt-config.deb
    mode: '0644'
    timeout: 30
  register: mysql_repo_download
  failed_when: false
  when: mysql_current_version.rc != 0
  tags: [mysql]

- name: Install MySQL APT repository
  apt:
    deb: /tmp/mysql-apt-config.deb
    state: present
  register: mysql_repo_install
  failed_when: false
  when: 
    - mysql_current_version.rc != 0
    - mysql_repo_download.failed is not defined or not mysql_repo_download.failed

- name: Update apt cache after adding MySQL repository
  apt:
    update_cache: yes
  register: mysql_repo_update
  failed_when: false
  when: 
    - mysql_current_version.rc != 0
    - mysql_repo_install.failed is not defined or not mysql_repo_install.failed

- name: Check if MySQL repository was added successfully
  shell: apt-cache policy mysql-server | grep -i mysql || echo "Using default repositories"
  register: mysql_repo_check
  changed_when: false

- name: Display MySQL repository status
  debug:
    msg: "MySQL Repository: {{ 'MySQL official repository added' if 'mysql' in mysql_repo_check.stdout else 'Using Ubuntu default repositories' }}"

# Install MySQL server (try latest first, fall back to default)
- name: Install MySQL server (latest from MySQL repository)
  apt:
    name:
      - mysql-server
      - mysql-client
      - python3-pymysql
    state: present
    update_cache: yes
  register: mysql_install_latest
  failed_when: false
  when: 
    - "'mysql' in mysql_repo_check.stdout"

- name: Install MySQL server (fallback to Ubuntu default)
  apt:
    name:
      - mysql-server
      - mysql-client
      - python3-pymysql
    state: present
    update_cache: yes
  register: mysql_install_default
  when: >
    (mysql_install_latest.failed is defined and mysql_install_latest.failed) or
    (mysql_install_latest.skipped is defined and mysql_install_latest.skipped)

- name: Verify MySQL installation
  command: mysql --version
  register: mysql_verify
  failed_when: mysql_verify.rc != 0
  changed_when: false

- name: Display installed MySQL version
  debug:
    msg: "Installed MySQL version: {{ mysql_verify.stdout }}"
  tags: [mysql]

- name: Start and enable MySQL service
  systemd:
    name: mysql
    state: started
    enabled: yes
  tags: [mysql]

- name: Set MySQL root password
  mysql_user:
    name: root
    password: "{{ mysql_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
    state: present

- name: Create MySQL configuration file for root
  template:
    src: root_my.cnf.j2
    dest: /root/.my.cnf
    owner: root
    group: root
    mode: '0600'

- name: Remove anonymous MySQL users
  mysql_user:
    name: ''
    host_all: yes
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Remove MySQL test database
  mysql_db:
    name: test
    state: absent
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create WordPress database
  mysql_db:
    name: "{{ wordpress_db_name }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create WordPress database user
  mysql_user:
    name: "{{ wordpress_db_user }}"
    password: "{{ mysql_wordpress_password }}"
    priv: "{{ wordpress_db_name }}.*:ALL"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
