---
# System preparation and environment checks
- name: Display system information
  debug:
    msg:
      - "üñ•Ô∏è  System Information:"
      - "OS: {{ ansible_distribution }} {{ ansible_distribution_version }}"
      - "Architecture: {{ ansible_architecture }}"
      - "Kernel: {{ ansible_kernel }}"
      - "Memory: {{ ansible_memtotal_mb }}MB"
      - "CPU Cores: {{ ansible_processor_vcpus }}"
  tags: [system-prep, info]

- name: Check OS compatibility
  fail:
    msg: "This playbook is designed for Ubuntu 20.04+ or Debian 10+. Current: {{ ansible_distribution }} {{ ansible_distribution_version }}"
  when: 
    - not (ansible_distribution == "Ubuntu" and ansible_distribution_version is version("20.04", ">="))
    - not (ansible_distribution == "Debian" and ansible_distribution_version is version("10", ">="))
  tags: [system-prep, compatibility]

- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600
  tags: [system-prep, packages]

- name: Install essential system packages
  apt:
    name:
      - curl
      - wget
      - unzip
      - git
      - software-properties-common
      - apt-transport-https
      - ca-certificates
      - gnupg
      - lsb-release
    state: present
  tags: [system-prep, packages]

- name: Check if PHP is installed
  command: php --version
  register: php_check
  failed_when: false
  changed_when: false

- name: Display current PHP status
  debug:
    msg: "PHP Status: {{ 'Installed - ' + php_check.stdout.split('\n')[0] if php_check.rc == 0 else 'Not installed' }}"

- name: Check if MySQL/MariaDB is installed
  command: mysql --version
  register: mysql_check
  failed_when: false
  changed_when: false

- name: Display current MySQL status
  debug:
    msg: "MySQL Status: {{ 'Installed - ' + mysql_check.stdout if mysql_check.rc == 0 else 'Not installed' }}"

- name: Check if Apache is installed
  command: apache2 -v
  register: apache_check
  failed_when: false
  changed_when: false

- name: Display current Apache status
  debug:
    msg: "Apache Status: {{ 'Installed - ' + apache_check.stdout.split('\n')[0] if apache_check.rc == 0 else 'Not installed' }}"

# Add repository for latest PHP (Ubuntu/Debian)
- name: Install software-properties-common for PPA support
  apt:
    name: software-properties-common
    state: present
    update_cache: yes
  when: ansible_distribution == "Ubuntu"

- name: Check internet connectivity
  uri:
    url: http://ppa.launchpad.net
    method: GET
    timeout: 10
  register: connectivity_check
  failed_when: false
  when: ansible_distribution == "Ubuntu"

- name: Display connectivity status
  debug:
    msg: "Internet connectivity to PPA: {{ 'OK' if connectivity_check.status == 200 else 'Failed - ' + (connectivity_check.msg | default('Unknown error')) }}"
  when: ansible_distribution == "Ubuntu"

- name: Add Ondrej PHP repository key (Ubuntu)
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 14AA40EC0831756756D7F66C4F4EA0AAE5267A6C
    state: present
  when: ansible_distribution == "Ubuntu"
  register: php_key_result
  failed_when: false

- name: Fallback - Add Ondrej PHP repository key via URL (Ubuntu)
  apt_key:
    url: https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x14AA40EC0831756756D7F66C4F4EA0AAE5267A6C
    state: present
  when: 
    - ansible_distribution == "Ubuntu"
    - php_key_result.failed is defined and php_key_result.failed

- name: Add Ondrej PHP repository manually (Ubuntu)
  apt_repository:
    repo: "deb http://ppa.launchpad.net/ondrej/php/ubuntu {{ ansible_distribution_release }} main"
    state: present
    filename: ondrej-ubuntu-php
  when: ansible_distribution == "Ubuntu"
  register: php_repo_result
  failed_when: false

- name: Fallback - Create PHP repository file manually (Ubuntu)
  copy:
    content: |
      deb http://ppa.launchpad.net/ondrej/php/ubuntu {{ ansible_distribution_release }} main
      # deb-src http://ppa.launchpad.net/ondrej/php/ubuntu {{ ansible_distribution_release }} main
    dest: /etc/apt/sources.list.d/ondrej-ubuntu-php-{{ ansible_distribution_release }}.list
    owner: root
    group: root
    mode: '0644'
  when: 
    - ansible_distribution == "Ubuntu"
    - php_repo_result.failed is defined and php_repo_result.failed

- name: Update apt cache after adding PHP repository (Ubuntu)
  apt:
    update_cache: yes
  when: ansible_distribution == "Ubuntu"
  register: apt_update_result
  failed_when: false

- name: Check if PHP repository was added successfully
  shell: apt-cache policy | grep -i ondrej || echo "PPA not found"
  register: ppa_check
  changed_when: false
  when: ansible_distribution == "Ubuntu"

- name: Display PHP repository status
  debug:
    msg: "PHP Repository Status: {{ 'Ondrej PPA available' if 'ondrej' in ppa_check.stdout else 'Using default Ubuntu repositories' }}"
  when: ansible_distribution == "Ubuntu"

- name: Install curl for alternative PHP installation method
  apt:
    name: curl
    state: present
  when: ansible_distribution == "Ubuntu"

- name: Add Ondrej PHP repository key (Debian)
  apt_key:
    url: https://packages.sury.org/php/apt.gpg
    state: present
  when: ansible_distribution == "Debian"

- name: Add Ondrej PHP repository (Debian)
  apt_repository:
    repo: "deb https://packages.sury.org/php/ {{ ansible_distribution_release }} main"
    state: present
    update_cache: yes
  when: ansible_distribution == "Debian"

# Determine target PHP version
- name: Set target PHP version
  set_fact:
    target_php_version: "8.3"  # Latest stable PHP version

- name: Display target PHP version
  debug:
    msg: "Target PHP version: {{ target_php_version }}"

# Check if we need to upgrade PHP
- name: Check current PHP version
  shell: php -r "echo PHP_MAJOR_VERSION.'.'.PHP_MINOR_VERSION;" 2>/dev/null || echo "none"
  register: current_php_version
  changed_when: false

- name: Determine if PHP upgrade is needed
  set_fact:
    php_upgrade_needed: "{{ current_php_version.stdout != target_php_version }}"

- name: Display PHP upgrade status
  debug:
    msg: "PHP upgrade needed: {{ php_upgrade_needed }} (current: {{ current_php_version.stdout }}, target: {{ target_php_version }})"

# MySQL/MariaDB version check
- name: Set target MySQL version
  set_fact:
    target_mysql_version: "8.0"  # MySQL 8.0 or MariaDB 10.6+

- name: Check current MySQL version
  shell: mysql --version 2>/dev/null | grep -oP 'Ver \K[0-9]+\.[0-9]+' || echo "none"
  register: current_mysql_version
  changed_when: false

- name: Display MySQL version status
  debug:
    msg: "Current MySQL version: {{ current_mysql_version.stdout }}"

# System resource checks
- name: Check available disk space
  shell: df -h / | awk 'NR==2 {print $4}'
  register: disk_space
  changed_when: false

- name: Check available memory
  debug:
    msg: "Available disk space: {{ disk_space.stdout }}, Memory: {{ ansible_memtotal_mb }}MB"

- name: Warn about low resources
  debug:
    msg: "‚ö†Ô∏è  WARNING: Low system resources detected. WordPress may run slowly."
  when: ansible_memtotal_mb < 1024

# Security updates
- name: Install security updates
  apt:
    upgrade: safe
    autoremove: yes
    autoclean: yes
  register: security_updates

- name: Display update status
  debug:
    msg: "Security updates installed: {{ security_updates.changed }}"

# Timezone configuration
- name: Set timezone to UTC
  timezone:
    name: UTC
  notify: restart cron

# Create swap if memory is low
- name: Check if swap exists
  shell: swapon --show | wc -l
  register: swap_check
  changed_when: false

- name: Create swap file if memory is low and no swap exists
  block:
    - name: Create swap file
      command: fallocate -l 2G /swapfile
      args:
        creates: /swapfile
    
    - name: Set swap file permissions
      file:
        path: /swapfile
        mode: '0600'
    
    - name: Make swap file
      command: mkswap /swapfile
      when: swap_check.stdout == "0"
    
    - name: Enable swap file
      command: swapon /swapfile
      when: swap_check.stdout == "0"
    
    - name: Add swap to fstab
      lineinfile:
        path: /etc/fstab
        line: "/swapfile none swap sw 0 0"
        backup: yes
      when: swap_check.stdout == "0"
      
  when: 
    - ansible_memtotal_mb < 2048
    - swap_check.stdout == "0"

- name: System preparation completed
  debug:
    msg: "‚úÖ System preparation completed successfully!"
  tags: [system-prep, always]
